        max = ft_max(stack);
        min = ft_min(stack);
        mediane = (max + min) / 2;
        while (!ft_check_sort_stack_a(stack))
        {
            while (stack.stack_a[0] != mediane)
            {
                //printf("\nsize A = %d\nsize B = %d\nmediane = %d\n", stack.size_a, stack.size_b, mediane);
                //printf("\nPENDANT  TAB A / TAB B\npos1 %lld pos1 %lld\npos2 %lld pos2 %lld\npos3 %lld pos3 %lld\npos4 %lld pos4 %lld\npos5 %lld pos5 %lld\n", stack.stack_a[0], stack.stack_b[0], stack.stack_a[1], stack.stack_b[1], stack.stack_a[2], stack.stack_b[2], stack.stack_a[3], stack.stack_b[3], stack.stack_a[4], stack.stack_b[4]);
                if (stack.stack_a[0] < mediane)
                    stack = ft_push_b(stack);
                else
                    stack = ft_rotate_a(stack);
                /*while (stack.size_b > 1 && !ft_check_sort_stack_b(stack))
                {
                    printf("\nsize A = %d\nsize B = %d\nmediane = %d\n", stack.size_a, stack.size_b, mediane);
                    printf("\nPENDANT  TAB A / TAB B\npos1 %lld pos1 %lld\npos2 %lld pos2 %lld\npos3 %lld pos3 %lld\npos4 %lld pos4 %lld\npos5 %lld pos5 %lld\n", stack.stack_a[0], stack.stack_b[0], stack.stack_a[1], stack.stack_b[1], stack.stack_a[2], stack.stack_b[2], stack.stack_a[3], stack.stack_b[3], stack.stack_a[4], stack.stack_b[4]);
                    if (stack.size_b == 1)
                        stack = ft_push_a(stack);
                    if (stack.stack_b[0] > stack.stack_b[1])
                        stack = ft_swapb(stack);
                    else
                        stack = ft_rotate_b(stack);
                    }*/
            }
            //printf("\nsize A = %d\nsize B = %d\nmediane = %d\n", stack.size_a, stack.size_b, mediane);
            //printf("\nPENDANT  TAB A / TAB B\npos1 %lld pos1 %lld\npos2 %lld pos2 %lld\npos3 %lld pos3 %lld\npos4 %lld pos4 %lld\npos5 %lld pos5 %lld\n", stack.stack_a[0], stack.stack_b[0], stack.stack_a[1], stack.stack_b[1], stack.stack_a[2], stack.stack_b[2], stack.stack_a[3], stack.stack_b[3], stack.stack_a[4], stack.stack_b[4]);
            if (stack.stack_a[0] == mediane)
                {
                    stack = ft_push_b(stack);
                    mediane++;
                }
        }